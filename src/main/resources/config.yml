
# A configuration file for the converter. A config file exist in the 'resources' directory.
# If an application is compiled to the 'jar', you may use an override config file, at the
#   same level as the 'jar' exist
# Alternatively, you may use a command line options

#
# A path, where *.proto source files resides.
proto_search_paths:
    - 'D:/Infraworld2/protos/test1/'
    - 'D:/Infraworld2/protos/test11/'

proto_include_paths:
    - 'D:/Infraworld2/protos/'
    - 'D:/Infraworld2/InfraworldRuntime/GrpcIncludes/third_party/protobuf/src/'

#
# A path, where generated UE C++ public classes should be placed.
dst_public_path: 'D:/Infraworld2/ue/Plugins/VizorGrpcClient/Source/VizorGrpcClient/Public/'

#
# A path, where generated UE C++ private classes should be placed.
dst_private_path: 'D:/Infraworld2/ue/Plugins/VizorGrpcClient/Source/VizorGrpcClient/Private/'

#
# Name of the module (Needed to compute API, like MYMODULE_API)
#
# NOTE: Left it blank if you don't want to use API.
# NOTE: If not left blank, it mustn't contain any spaces, this is checked in run-time.
module_name: 'InfraworldClientDemo'

#
# In case you're using precompiled headers - provide a valid relative or absolute path to the precompiled header.
# Or otherwise left it blank or don't use precompiled headers.
# precompiled_header: 'InfraworldClientDemo.h'

#
# Name of the folder, where files generated by protoc should reside.
# This path is relative to the folder, you've added in project's either:
#   * PublicIncludePaths
#   * PrivateIncludePaths
wrappers_path: 'Wrappers'

#
# Company name will be used to declare category, where RPC methods will reside.
#
# NOTE: Mustn't contain any '|' symbols, because it is used as the directory separator.
company_name: 'Vizor'

#
# Override log level if you want to. May be ignored, then log4j2.xml will be used.
#
# Avaliable variants are:
#   -off
#   -fatal
#   -error
#   -warn
#   -info
#   -info
#   -trace
#   -all
#log_level: 'debug'

#
# 'yes' to force the converter to work in the single thread.
# 'no' allows the converter to work within ForkJoinPool
#
# NOTE: it is 'no' by default
no_fork: yes
